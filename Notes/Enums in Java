enum Season {
	WINTER, SPRING, SUMMER, FALL
}

- all the constants declared here are STATIC FINAL.
- Enums can be traversed. 
  for(Season s : Season.values()) {
		System.out.println(s);
	}

- We can have fields, constructors, methods, and main() methods in Java enum.
- It internally creates a static and final class for the enum.
- Java compiler internally adds values(), valueOf() and ordinal() methods within the enum at compile time. 
values() => returns an array of all the values in enum of type Season.
valuesOf(String str) => Returns the constant value corresponding to the string.
ordinal() => will return the index of this enum.

- Enums can be defined inside or outside the class.
OR We can directly define the main method inside the enum.

-- we can use enums in place of classes to exactly specify that we want only 4 objects (WINTER, SPRING, SUMMER, FALL) and no other object should be created.
  all the operations that we do on an object will be same for these enum objects that we created.
-Enums cannot extend a class but can implement an interface.


+ TypeSafety using enums.
The primary advantage is type safety. With a set of constants, any value of the same intrinsic type could be used, introducing errors. With an enum only the applicable values can be used.

For example

public static final int SIZE_SMALL  = 1;
public static final int SIZE_MEDIUM = 2;
public static final int SIZE_LARGE  = 3;
public void setSize(int newSize) { ... }
obj.setSize(15); // Compiles but likely to fail later

vs

public enum Size { SMALL, MEDIUM, LARGE };
public void setSize(Size s) { ... }
obj.setSize( /*something related to size only*/ );
